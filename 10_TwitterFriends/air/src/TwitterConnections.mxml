<?xml version="1.0" encoding="utf-8"?>
<!--
    Retrieve twitter user friends.
    @TODO:  - activity indicator
            - usage: double click to select, click to view tweets
            - style tweets (remove xml)
            - don't retrieve if already in graph
            - better error handling
            - better defaults
-->
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:fc="http://www.adobe.com/2006/fc"
    backgroundGradientColors="[#888888,#333333]"
    layout="vertical"
    applicationComplete="init();" 
    width="100%" height="100%"
     xmlns:local="*">
    <mx:Script>
        <![CDATA[
            import mx.rpc.AsyncToken;
            import com.adobe.flex.extras.controls.springgraph.GraphDataProvider;
            import mx.controls.Alert;
            
            import mx.rpc.events.ResultEvent;
            import com.adobe.flex.extras.controls.springgraph.SpringGraph;
            import com.adobe.flex.extras.controls.springgraph.Item;
            import com.adobe.flex.extras.controls.springgraph.Graph;
            
            [Bindable]
            private var currentUser:String;
            
            [Bindable]
            private var selectedItem:Item;  // simple click selects user, double click retrieve friends
            
        private var graph:Graph;
        
        // Rails server calls
        // --------------------------------------
        
        private function init():void {
            roamer.repulsionFactor = 0.4;
            roamer.showHistory = true;
            searchTwitterUser('railsconf2008')
        }
            
        private function searchTwitterUser(twitterUser:String):void {
            currentUser = twitterUser;
            user.send();
            setupGraph();
        }    
        
        /*
        <Node id="1" prop="1(4)"/>
        <Edge fromID="1.2.3.4" toID="1.2.3.4.5"/>
        
        */
        private function setupGraph(): void {
            roamer.resetHistory();
            roamer.resetShowHide();
            roamer.xmlNames = ['user','Edge','fromID','toID']; //['Node','Edge','fromID','toID']
            graph = new Graph()
            roamer.dataProvider = graph;         
        }
        
        /*
        <user>
  <description>Flex and Ruby on Rails developer</description>
  <screen-name>danielwanja</screen-name>
  <name>Daniel Wanja</name>
  <profile-image-url>http://s3.amazonaws.com/twitter_production/profile_images/52403580/Photo_113_normal.jpg</profile-image-url>
  <url>http://onrails.org</url>
  <id type="integer">7221352</id>
  <location>Denver</location>
</user>
    */
            
        private function showUser(event:ResultEvent):void {
            var user:XML = event.result as XML;
            var item:Item = new Item(user.name);
            item.data = user;
            graph.add(item);
            roamer.dataProvider = graph; //FORCE refresh
        }    
        
        private function showFriends(event:ResultEvent):void {
            var result:XML = event.result as XML;
            var users:XMLList = result.record;
            var currentUser:Item = event.token.currentUser;
            for each (var user:XML in users) {
                var friend:Item = new Item(user.name);
                friend.data = user;
                graph.add(friend);
                graph.link(currentUser, friend);
            }
            roamer.currentItem = currentUser;    
        }
        
        // Graph Handling
        // --------------------------------------
            
            public function itemDoubleClick(event: Event): void {
                roamer.currentItem = event.currentTarget.data;
                currentUser = roamer.currentItem.data.screen_name;  
                //FIXME: don't retrieve if already retrieved
                var call:AsyncToken = friends.send();
                call.currentUser = roamer.currentItem;
            }
            
            public function itemClick(event: Event) : void {
                selectedItem = event.currentTarget.data;
            }    
        
             
             public function parseTweets(): void {
                var content:String="";
                try {
                    tweetsOnly.text = twitterPage.domWindow.$('timeline').innerText;
                } catch (err:Error) {
                    tweetsOnly.text = "Twitter Error/n"+err.message; // If $ function not define in page...
                }
             }
        ]]>
    </mx:Script>                    

<mx:HTTPService id="user" url="http://localhost:3000/twitter/user/{currentUser}" 
    resultFormat="e4x"
    makeObjectsBindable="false" showBusyCursor="true" 
    result="showUser(event)"
    fault="mx.controls.Alert.show(event.fault.faultString, 'Retrieve User Failed')" />    
    
<mx:HTTPService id="friends" url="http://localhost:3000/twitter/friends/{currentUser}" 
    resultFormat="e4x"
    makeObjectsBindable="false" showBusyCursor="true" 
    result="showFriends(event)"
    fault="mx.controls.Alert.show(event.fault.faultString, 'Retrieve Friends Failed')" />    
    
<mx:TextInput x="259" y="10" id="twitterUser"/>
<mx:Button x="427" y="10" label="Find" id="findBtn" click="searchTwitterUser(twitterUser.text)"/>
<mx:HBox width="100%" height="100%">
    
    <mx:HDividedBox width="100%" height="100%">        

    <fc:Roamer id="roamer" width="100%" height="100%" 
        itemRenderer="XMLItemView"
        maxDistanceFromCurrent="2" 
        itemLimit="400"
        autoFit="false"
        repulsionFactor="1.5"
        motionThreshold="1">

        <fc:removeItemEffect>
            <mx:Fade alphaFrom="1" alphaTo="0" duration="1000"/>                
        </fc:removeItemEffect>
        
        <fc:addItemEffect>
            <mx:Fade alphaFrom="0" alphaTo="1" duration="1000"/>
        </fc:addItemEffect>
    </fc:Roamer>

        <mx:Accordion width="200" height="100%" >
            <mx:Canvas label="Tweets {selectedItem.data.name}" width="100%" height="100%">
              <mx:Text id="tweetsOnly" width="100%" height="100%" />
              <mx:HTML id="twitterPage" location="http://twitter.com/{selectedItem.data.screen_name}"  visible="false" includeInLayout="false"
                    complete="parseTweets();"/>
            </mx:Canvas>
            <mx:Canvas label="XML" width="100%" height="100%">
               <mx:Text text="{selectedItem.data.toXMLString()}" />
            </mx:Canvas>
        </mx:Accordion>

    </mx:HDividedBox>
</mx:HBox>    
</mx:WindowedApplication>
